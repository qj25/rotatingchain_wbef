# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Stab_jac
else:
    import _Stab_jac

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class Stab_jac(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, in_rho_a, in_d, in_c_f, in_c_n, in_k, in_error_verbose):
        _Stab_jac.Stab_jac_swiginit(self, _Stab_jac.new_Stab_jac(in_rho_a, in_d, in_c_f, in_c_n, in_k, in_error_verbose))
    error_verbose = property(_Stab_jac.Stab_jac_error_verbose_get, _Stab_jac.Stab_jac_error_verbose_set)
    rho_a = property(_Stab_jac.Stab_jac_rho_a_get, _Stab_jac.Stab_jac_rho_a_set)
    d = property(_Stab_jac.Stab_jac_d_get, _Stab_jac.Stab_jac_d_set)
    c_f = property(_Stab_jac.Stab_jac_c_f_get, _Stab_jac.Stab_jac_c_f_set)
    c_n = property(_Stab_jac.Stab_jac_c_n_get, _Stab_jac.Stab_jac_c_n_set)
    k = property(_Stab_jac.Stab_jac_k_get, _Stab_jac.Stab_jac_k_set)
    i3 = property(_Stab_jac.Stab_jac_i3_get, _Stab_jac.Stab_jac_i3_set)
    n = property(_Stab_jac.Stab_jac_n_get, _Stab_jac.Stab_jac_n_set)
    n_i = property(_Stab_jac.Stab_jac_n_i_get, _Stab_jac.Stab_jac_n_i_set)
    l_total = property(_Stab_jac.Stab_jac_l_total_get, _Stab_jac.Stab_jac_l_total_set)
    l = property(_Stab_jac.Stab_jac_l_get, _Stab_jac.Stab_jac_l_set)
    m = property(_Stab_jac.Stab_jac_m_get, _Stab_jac.Stab_jac_m_set)
    v_rot = property(_Stab_jac.Stab_jac_v_rot_get, _Stab_jac.Stab_jac_v_rot_set)
    vrot_skew = property(_Stab_jac.Stab_jac_vrot_skew_get, _Stab_jac.Stab_jac_vrot_skew_set)
    x = property(_Stab_jac.Stab_jac_x_get, _Stab_jac.Stab_jac_x_set)
    x_dot = property(_Stab_jac.Stab_jac_x_dot_get, _Stab_jac.Stab_jac_x_dot_set)
    l_n = property(_Stab_jac.Stab_jac_l_n_get, _Stab_jac.Stab_jac_l_n_set)
    ln_norm = property(_Stab_jac.Stab_jac_ln_norm_get, _Stab_jac.Stab_jac_ln_norm_set)
    l_n_avg = property(_Stab_jac.Stab_jac_l_n_avg_get, _Stab_jac.Stab_jac_l_n_avg_set)
    vt = property(_Stab_jac.Stab_jac_vt_get, _Stab_jac.Stab_jac_vt_set)
    vt_norm = property(_Stab_jac.Stab_jac_vt_norm_get, _Stab_jac.Stab_jac_vt_norm_set)
    jac_mat = property(_Stab_jac.Stab_jac_jac_mat_get, _Stab_jac.Stab_jac_jac_mat_set)

    def calc_stab(self, dim_stabjac, dim_y, in_mu, in_l, in_v_rot):
        return _Stab_jac.Stab_jac_calc_stab(self, dim_stabjac, dim_y, in_mu, in_l, in_v_rot)
    __swig_destroy__ = _Stab_jac.delete_Stab_jac

# Register Stab_jac in _Stab_jac:
_Stab_jac.Stab_jac_swigregister(Stab_jac)



