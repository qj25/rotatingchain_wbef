# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Shootc
else:
    import _Shootc

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class Shootc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, in_v_rot, in_l, in_mu, in_n_steps, in_g, in_k, in_srl, in_error_verbose):
        _Shootc.Shootc_swiginit(self, _Shootc.new_Shootc(in_v_rot, in_l, in_mu, in_n_steps, in_g, in_k, in_srl, in_error_verbose))
    error_verbose = property(_Shootc.Shootc_error_verbose_get, _Shootc.Shootc_error_verbose_set)
    split_ratio_latter = property(_Shootc.Shootc_split_ratio_latter_get, _Shootc.Shootc_split_ratio_latter_set)
    g = property(_Shootc.Shootc_g_get, _Shootc.Shootc_g_set)
    k = property(_Shootc.Shootc_k_get, _Shootc.Shootc_k_set)
    v_rot = property(_Shootc.Shootc_v_rot_get, _Shootc.Shootc_v_rot_set)
    rbar = property(_Shootc.Shootc_rbar_get, _Shootc.Shootc_rbar_set)
    l = property(_Shootc.Shootc_l_get, _Shootc.Shootc_l_set)
    lbar = property(_Shootc.Shootc_lbar_get, _Shootc.Shootc_lbar_set)
    mu = property(_Shootc.Shootc_mu_get, _Shootc.Shootc_mu_set)
    m = property(_Shootc.Shootc_m_get, _Shootc.Shootc_m_set)
    n_steps = property(_Shootc.Shootc_n_steps_get, _Shootc.Shootc_n_steps_set)
    sbar = property(_Shootc.Shootc_sbar_get, _Shootc.Shootc_sbar_set)
    sbar_actual = property(_Shootc.Shootc_sbar_actual_get, _Shootc.Shootc_sbar_actual_set)
    sbar_step = property(_Shootc.Shootc_sbar_step_get, _Shootc.Shootc_sbar_step_set)
    rho_1_0 = property(_Shootc.Shootc_rho_1_0_get, _Shootc.Shootc_rho_1_0_set)
    grad_ratio = property(_Shootc.Shootc_grad_ratio_get, _Shootc.Shootc_grad_ratio_set)
    u_1_0 = property(_Shootc.Shootc_u_1_0_get, _Shootc.Shootc_u_1_0_set)
    fbar = property(_Shootc.Shootc_fbar_get, _Shootc.Shootc_fbar_set)
    rho_1 = property(_Shootc.Shootc_rho_1_get, _Shootc.Shootc_rho_1_set)
    u_1 = property(_Shootc.Shootc_u_1_get, _Shootc.Shootc_u_1_set)
    u = property(_Shootc.Shootc_u_get, _Shootc.Shootc_u_set)
    u_1_desired = property(_Shootc.Shootc_u_1_desired_get, _Shootc.Shootc_u_1_desired_set)

    def get_info(self, dim_u1, dim_sbar, dim_rho1):
        return _Shootc.Shootc_get_info(self, dim_u1, dim_sbar, dim_rho1)

    def bang(self, fbg, in_rho_1_0):
        return _Shootc.Shootc_bang(self, fbg, in_rho_1_0)
    __swig_destroy__ = _Shootc.delete_Shootc

# Register Shootc in _Shootc:
_Shootc.Shootc_swigregister(Shootc)



